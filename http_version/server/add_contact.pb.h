// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: add_contact.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_add_5fcontact_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_add_5fcontact_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_add_5fcontact_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_add_5fcontact_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_add_5fcontact_2eproto;
namespace add_contact {
class AddContactRequest;
class AddContactRequestDefaultTypeInternal;
extern AddContactRequestDefaultTypeInternal _AddContactRequest_default_instance_;
class AddContactRequest_Phone;
class AddContactRequest_PhoneDefaultTypeInternal;
extern AddContactRequest_PhoneDefaultTypeInternal _AddContactRequest_Phone_default_instance_;
class AddContactResponse;
class AddContactResponseDefaultTypeInternal;
extern AddContactResponseDefaultTypeInternal _AddContactResponse_default_instance_;
}  // namespace add_contact
PROTOBUF_NAMESPACE_OPEN
template<> ::add_contact::AddContactRequest* Arena::CreateMaybeMessage<::add_contact::AddContactRequest>(Arena*);
template<> ::add_contact::AddContactRequest_Phone* Arena::CreateMaybeMessage<::add_contact::AddContactRequest_Phone>(Arena*);
template<> ::add_contact::AddContactResponse* Arena::CreateMaybeMessage<::add_contact::AddContactResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace add_contact {

enum AddContactRequest_Phone_PhoneType : int {
  AddContactRequest_Phone_PhoneType_MP = 0,
  AddContactRequest_Phone_PhoneType_TEL = 1,
  AddContactRequest_Phone_PhoneType_AddContactRequest_Phone_PhoneType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AddContactRequest_Phone_PhoneType_AddContactRequest_Phone_PhoneType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AddContactRequest_Phone_PhoneType_IsValid(int value);
constexpr AddContactRequest_Phone_PhoneType AddContactRequest_Phone_PhoneType_PhoneType_MIN = AddContactRequest_Phone_PhoneType_MP;
constexpr AddContactRequest_Phone_PhoneType AddContactRequest_Phone_PhoneType_PhoneType_MAX = AddContactRequest_Phone_PhoneType_TEL;
constexpr int AddContactRequest_Phone_PhoneType_PhoneType_ARRAYSIZE = AddContactRequest_Phone_PhoneType_PhoneType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddContactRequest_Phone_PhoneType_descriptor();
template<typename T>
inline const std::string& AddContactRequest_Phone_PhoneType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AddContactRequest_Phone_PhoneType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AddContactRequest_Phone_PhoneType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AddContactRequest_Phone_PhoneType_descriptor(), enum_t_value);
}
inline bool AddContactRequest_Phone_PhoneType_Parse(
    const std::string& name, AddContactRequest_Phone_PhoneType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AddContactRequest_Phone_PhoneType>(
    AddContactRequest_Phone_PhoneType_descriptor(), name, value);
}
// ===================================================================

class AddContactRequest_Phone PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:add_contact.AddContactRequest.Phone) */ {
 public:
  inline AddContactRequest_Phone() : AddContactRequest_Phone(nullptr) {};
  virtual ~AddContactRequest_Phone();

  AddContactRequest_Phone(const AddContactRequest_Phone& from);
  AddContactRequest_Phone(AddContactRequest_Phone&& from) noexcept
    : AddContactRequest_Phone() {
    *this = ::std::move(from);
  }

  inline AddContactRequest_Phone& operator=(const AddContactRequest_Phone& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddContactRequest_Phone& operator=(AddContactRequest_Phone&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddContactRequest_Phone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddContactRequest_Phone* internal_default_instance() {
    return reinterpret_cast<const AddContactRequest_Phone*>(
               &_AddContactRequest_Phone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddContactRequest_Phone& a, AddContactRequest_Phone& b) {
    a.Swap(&b);
  }
  inline void Swap(AddContactRequest_Phone* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddContactRequest_Phone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddContactRequest_Phone* New() const final {
    return CreateMaybeMessage<AddContactRequest_Phone>(nullptr);
  }

  AddContactRequest_Phone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddContactRequest_Phone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddContactRequest_Phone& from);
  void MergeFrom(const AddContactRequest_Phone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddContactRequest_Phone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "add_contact.AddContactRequest.Phone";
  }
  protected:
  explicit AddContactRequest_Phone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_add_5fcontact_2eproto);
    return ::descriptor_table_add_5fcontact_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddContactRequest_Phone_PhoneType PhoneType;
  static constexpr PhoneType MP =
    AddContactRequest_Phone_PhoneType_MP;
  static constexpr PhoneType TEL =
    AddContactRequest_Phone_PhoneType_TEL;
  static inline bool PhoneType_IsValid(int value) {
    return AddContactRequest_Phone_PhoneType_IsValid(value);
  }
  static constexpr PhoneType PhoneType_MIN =
    AddContactRequest_Phone_PhoneType_PhoneType_MIN;
  static constexpr PhoneType PhoneType_MAX =
    AddContactRequest_Phone_PhoneType_PhoneType_MAX;
  static constexpr int PhoneType_ARRAYSIZE =
    AddContactRequest_Phone_PhoneType_PhoneType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PhoneType_descriptor() {
    return AddContactRequest_Phone_PhoneType_descriptor();
  }
  template<typename T>
  static inline const std::string& PhoneType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PhoneType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PhoneType_Name.");
    return AddContactRequest_Phone_PhoneType_Name(enum_t_value);
  }
  static inline bool PhoneType_Parse(const std::string& name,
      PhoneType* value) {
    return AddContactRequest_Phone_PhoneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string number = 1;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_number();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_number(
      std::string* number);
  private:
  const std::string& _internal_number() const;
  void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // .add_contact.AddContactRequest.Phone.PhoneType type = 2;
  void clear_type();
  ::add_contact::AddContactRequest_Phone_PhoneType type() const;
  void set_type(::add_contact::AddContactRequest_Phone_PhoneType value);
  private:
  ::add_contact::AddContactRequest_Phone_PhoneType _internal_type() const;
  void _internal_set_type(::add_contact::AddContactRequest_Phone_PhoneType value);
  public:

  // @@protoc_insertion_point(class_scope:add_contact.AddContactRequest.Phone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_add_5fcontact_2eproto;
};
// -------------------------------------------------------------------

class AddContactRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:add_contact.AddContactRequest) */ {
 public:
  inline AddContactRequest() : AddContactRequest(nullptr) {};
  virtual ~AddContactRequest();

  AddContactRequest(const AddContactRequest& from);
  AddContactRequest(AddContactRequest&& from) noexcept
    : AddContactRequest() {
    *this = ::std::move(from);
  }

  inline AddContactRequest& operator=(const AddContactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddContactRequest& operator=(AddContactRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddContactRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddContactRequest* internal_default_instance() {
    return reinterpret_cast<const AddContactRequest*>(
               &_AddContactRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddContactRequest& a, AddContactRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddContactRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddContactRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddContactRequest* New() const final {
    return CreateMaybeMessage<AddContactRequest>(nullptr);
  }

  AddContactRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddContactRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddContactRequest& from);
  void MergeFrom(const AddContactRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddContactRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "add_contact.AddContactRequest";
  }
  protected:
  explicit AddContactRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_add_5fcontact_2eproto);
    return ::descriptor_table_add_5fcontact_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddContactRequest_Phone Phone;

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 3,
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
  };
  // repeated .add_contact.AddContactRequest.Phone phone = 3;
  int phone_size() const;
  private:
  int _internal_phone_size() const;
  public:
  void clear_phone();
  ::add_contact::AddContactRequest_Phone* mutable_phone(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::add_contact::AddContactRequest_Phone >*
      mutable_phone();
  private:
  const ::add_contact::AddContactRequest_Phone& _internal_phone(int index) const;
  ::add_contact::AddContactRequest_Phone* _internal_add_phone();
  public:
  const ::add_contact::AddContactRequest_Phone& phone(int index) const;
  ::add_contact::AddContactRequest_Phone* add_phone();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::add_contact::AddContactRequest_Phone >&
      phone() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 2;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:add_contact.AddContactRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::add_contact::AddContactRequest_Phone > phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_add_5fcontact_2eproto;
};
// -------------------------------------------------------------------

class AddContactResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:add_contact.AddContactResponse) */ {
 public:
  inline AddContactResponse() : AddContactResponse(nullptr) {};
  virtual ~AddContactResponse();

  AddContactResponse(const AddContactResponse& from);
  AddContactResponse(AddContactResponse&& from) noexcept
    : AddContactResponse() {
    *this = ::std::move(from);
  }

  inline AddContactResponse& operator=(const AddContactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddContactResponse& operator=(AddContactResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddContactResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddContactResponse* internal_default_instance() {
    return reinterpret_cast<const AddContactResponse*>(
               &_AddContactResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddContactResponse& a, AddContactResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddContactResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddContactResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddContactResponse* New() const final {
    return CreateMaybeMessage<AddContactResponse>(nullptr);
  }

  AddContactResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddContactResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddContactResponse& from);
  void MergeFrom(const AddContactResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddContactResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "add_contact.AddContactResponse";
  }
  protected:
  explicit AddContactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_add_5fcontact_2eproto);
    return ::descriptor_table_add_5fcontact_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescInfoFieldNumber = 2,
    kUidFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string desc_info = 2;
  void clear_desc_info();
  const std::string& desc_info() const;
  void set_desc_info(const std::string& value);
  void set_desc_info(std::string&& value);
  void set_desc_info(const char* value);
  void set_desc_info(const char* value, size_t size);
  std::string* mutable_desc_info();
  std::string* release_desc_info();
  void set_allocated_desc_info(std::string* desc_info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_desc_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_desc_info(
      std::string* desc_info);
  private:
  const std::string& _internal_desc_info() const;
  void _internal_set_desc_info(const std::string& value);
  std::string* _internal_mutable_desc_info();
  public:

  // string uid = 3;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uid(
      std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:add_contact.AddContactResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_add_5fcontact_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddContactRequest_Phone

// string number = 1;
inline void AddContactRequest_Phone::clear_number() {
  number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddContactRequest_Phone::number() const {
  // @@protoc_insertion_point(field_get:add_contact.AddContactRequest.Phone.number)
  return _internal_number();
}
inline void AddContactRequest_Phone::set_number(const std::string& value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:add_contact.AddContactRequest.Phone.number)
}
inline std::string* AddContactRequest_Phone::mutable_number() {
  // @@protoc_insertion_point(field_mutable:add_contact.AddContactRequest.Phone.number)
  return _internal_mutable_number();
}
inline const std::string& AddContactRequest_Phone::_internal_number() const {
  return number_.Get();
}
inline void AddContactRequest_Phone::_internal_set_number(const std::string& value) {
  
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddContactRequest_Phone::set_number(std::string&& value) {
  
  number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:add_contact.AddContactRequest.Phone.number)
}
inline void AddContactRequest_Phone::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:add_contact.AddContactRequest.Phone.number)
}
inline void AddContactRequest_Phone::set_number(const char* value,
    size_t size) {
  
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:add_contact.AddContactRequest.Phone.number)
}
inline std::string* AddContactRequest_Phone::_internal_mutable_number() {
  
  return number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddContactRequest_Phone::release_number() {
  // @@protoc_insertion_point(field_release:add_contact.AddContactRequest.Phone.number)
  return number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddContactRequest_Phone::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:add_contact.AddContactRequest.Phone.number)
}
inline std::string* AddContactRequest_Phone::unsafe_arena_release_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:add_contact.AddContactRequest.Phone.number)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return number_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddContactRequest_Phone::unsafe_arena_set_allocated_number(
    std::string* number) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (number != nullptr) {
    
  } else {
    
  }
  number_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      number, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:add_contact.AddContactRequest.Phone.number)
}

// .add_contact.AddContactRequest.Phone.PhoneType type = 2;
inline void AddContactRequest_Phone::clear_type() {
  type_ = 0;
}
inline ::add_contact::AddContactRequest_Phone_PhoneType AddContactRequest_Phone::_internal_type() const {
  return static_cast< ::add_contact::AddContactRequest_Phone_PhoneType >(type_);
}
inline ::add_contact::AddContactRequest_Phone_PhoneType AddContactRequest_Phone::type() const {
  // @@protoc_insertion_point(field_get:add_contact.AddContactRequest.Phone.type)
  return _internal_type();
}
inline void AddContactRequest_Phone::_internal_set_type(::add_contact::AddContactRequest_Phone_PhoneType value) {
  
  type_ = value;
}
inline void AddContactRequest_Phone::set_type(::add_contact::AddContactRequest_Phone_PhoneType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:add_contact.AddContactRequest.Phone.type)
}

// -------------------------------------------------------------------

// AddContactRequest

// string name = 1;
inline void AddContactRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddContactRequest::name() const {
  // @@protoc_insertion_point(field_get:add_contact.AddContactRequest.name)
  return _internal_name();
}
inline void AddContactRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:add_contact.AddContactRequest.name)
}
inline std::string* AddContactRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:add_contact.AddContactRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AddContactRequest::_internal_name() const {
  return name_.Get();
}
inline void AddContactRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddContactRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:add_contact.AddContactRequest.name)
}
inline void AddContactRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:add_contact.AddContactRequest.name)
}
inline void AddContactRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:add_contact.AddContactRequest.name)
}
inline std::string* AddContactRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddContactRequest::release_name() {
  // @@protoc_insertion_point(field_release:add_contact.AddContactRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddContactRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:add_contact.AddContactRequest.name)
}
inline std::string* AddContactRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:add_contact.AddContactRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddContactRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:add_contact.AddContactRequest.name)
}

// int32 age = 2;
inline void AddContactRequest::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddContactRequest::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddContactRequest::age() const {
  // @@protoc_insertion_point(field_get:add_contact.AddContactRequest.age)
  return _internal_age();
}
inline void AddContactRequest::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void AddContactRequest::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:add_contact.AddContactRequest.age)
}

// repeated .add_contact.AddContactRequest.Phone phone = 3;
inline int AddContactRequest::_internal_phone_size() const {
  return phone_.size();
}
inline int AddContactRequest::phone_size() const {
  return _internal_phone_size();
}
inline void AddContactRequest::clear_phone() {
  phone_.Clear();
}
inline ::add_contact::AddContactRequest_Phone* AddContactRequest::mutable_phone(int index) {
  // @@protoc_insertion_point(field_mutable:add_contact.AddContactRequest.phone)
  return phone_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::add_contact::AddContactRequest_Phone >*
AddContactRequest::mutable_phone() {
  // @@protoc_insertion_point(field_mutable_list:add_contact.AddContactRequest.phone)
  return &phone_;
}
inline const ::add_contact::AddContactRequest_Phone& AddContactRequest::_internal_phone(int index) const {
  return phone_.Get(index);
}
inline const ::add_contact::AddContactRequest_Phone& AddContactRequest::phone(int index) const {
  // @@protoc_insertion_point(field_get:add_contact.AddContactRequest.phone)
  return _internal_phone(index);
}
inline ::add_contact::AddContactRequest_Phone* AddContactRequest::_internal_add_phone() {
  return phone_.Add();
}
inline ::add_contact::AddContactRequest_Phone* AddContactRequest::add_phone() {
  // @@protoc_insertion_point(field_add:add_contact.AddContactRequest.phone)
  return _internal_add_phone();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::add_contact::AddContactRequest_Phone >&
AddContactRequest::phone() const {
  // @@protoc_insertion_point(field_list:add_contact.AddContactRequest.phone)
  return phone_;
}

// -------------------------------------------------------------------

// AddContactResponse

// bool success = 1;
inline void AddContactResponse::clear_success() {
  success_ = false;
}
inline bool AddContactResponse::_internal_success() const {
  return success_;
}
inline bool AddContactResponse::success() const {
  // @@protoc_insertion_point(field_get:add_contact.AddContactResponse.success)
  return _internal_success();
}
inline void AddContactResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AddContactResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:add_contact.AddContactResponse.success)
}

// string desc_info = 2;
inline void AddContactResponse::clear_desc_info() {
  desc_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddContactResponse::desc_info() const {
  // @@protoc_insertion_point(field_get:add_contact.AddContactResponse.desc_info)
  return _internal_desc_info();
}
inline void AddContactResponse::set_desc_info(const std::string& value) {
  _internal_set_desc_info(value);
  // @@protoc_insertion_point(field_set:add_contact.AddContactResponse.desc_info)
}
inline std::string* AddContactResponse::mutable_desc_info() {
  // @@protoc_insertion_point(field_mutable:add_contact.AddContactResponse.desc_info)
  return _internal_mutable_desc_info();
}
inline const std::string& AddContactResponse::_internal_desc_info() const {
  return desc_info_.Get();
}
inline void AddContactResponse::_internal_set_desc_info(const std::string& value) {
  
  desc_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddContactResponse::set_desc_info(std::string&& value) {
  
  desc_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:add_contact.AddContactResponse.desc_info)
}
inline void AddContactResponse::set_desc_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:add_contact.AddContactResponse.desc_info)
}
inline void AddContactResponse::set_desc_info(const char* value,
    size_t size) {
  
  desc_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:add_contact.AddContactResponse.desc_info)
}
inline std::string* AddContactResponse::_internal_mutable_desc_info() {
  
  return desc_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddContactResponse::release_desc_info() {
  // @@protoc_insertion_point(field_release:add_contact.AddContactResponse.desc_info)
  return desc_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddContactResponse::set_allocated_desc_info(std::string* desc_info) {
  if (desc_info != nullptr) {
    
  } else {
    
  }
  desc_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:add_contact.AddContactResponse.desc_info)
}
inline std::string* AddContactResponse::unsafe_arena_release_desc_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:add_contact.AddContactResponse.desc_info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return desc_info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddContactResponse::unsafe_arena_set_allocated_desc_info(
    std::string* desc_info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (desc_info != nullptr) {
    
  } else {
    
  }
  desc_info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      desc_info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:add_contact.AddContactResponse.desc_info)
}

// string uid = 3;
inline void AddContactResponse::clear_uid() {
  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddContactResponse::uid() const {
  // @@protoc_insertion_point(field_get:add_contact.AddContactResponse.uid)
  return _internal_uid();
}
inline void AddContactResponse::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:add_contact.AddContactResponse.uid)
}
inline std::string* AddContactResponse::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:add_contact.AddContactResponse.uid)
  return _internal_mutable_uid();
}
inline const std::string& AddContactResponse::_internal_uid() const {
  return uid_.Get();
}
inline void AddContactResponse::_internal_set_uid(const std::string& value) {
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddContactResponse::set_uid(std::string&& value) {
  
  uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:add_contact.AddContactResponse.uid)
}
inline void AddContactResponse::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:add_contact.AddContactResponse.uid)
}
inline void AddContactResponse::set_uid(const char* value,
    size_t size) {
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:add_contact.AddContactResponse.uid)
}
inline std::string* AddContactResponse::_internal_mutable_uid() {
  
  return uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddContactResponse::release_uid() {
  // @@protoc_insertion_point(field_release:add_contact.AddContactResponse.uid)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddContactResponse::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:add_contact.AddContactResponse.uid)
}
inline std::string* AddContactResponse::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:add_contact.AddContactResponse.uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddContactResponse::unsafe_arena_set_allocated_uid(
    std::string* uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:add_contact.AddContactResponse.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace add_contact

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::add_contact::AddContactRequest_Phone_PhoneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::add_contact::AddContactRequest_Phone_PhoneType>() {
  return ::add_contact::AddContactRequest_Phone_PhoneType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_add_5fcontact_2eproto
